// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/addexternaluser/{organizationRef}": {
            "post": {
                "security": [
                    {
                        "ApiKeyToken": []
                    }
                ],
                "description": "Add an external user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Add External User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization name",
                        "name": "organizationRef",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "external user email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ExternalUserDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    },
                    "404": {
                        "description": "not found"
                    }
                }
            }
        },
        "/agolarefs": {
            "get": {
                "security": [
                    {
                        "ApiKeyToken": []
                    }
                ],
                "description": "Return the organization ref list existing in Agola but not in Papagaio",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Return the organization ref list",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request"
                    }
                }
            }
        },
        "/createorganization": {
            "post": {
                "security": [
                    {
                        "ApiKeyToken": []
                    }
                ],
                "description": "Create an organization in Papagaio and in Agola. If already exists on Agola and you want to use the same organization then use the query parameter force",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Create a new Organization in Papagaio/Agola",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "?force",
                        "name": "force",
                        "in": "query"
                    },
                    {
                        "description": "Organization information",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateOrganizationRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateOrganizationResponseDto"
                        }
                    },
                    "400": {
                        "description": "bad request"
                    }
                }
            }
        },
        "/deleteexternaluser/{organizationRef}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyToken": []
                    }
                ],
                "description": "Delete an external user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Delete External User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization name",
                        "name": "organizationRef",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "external user email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    },
                    "404": {
                        "description": "not found"
                    }
                }
            }
        },
        "/deleteorganization{organizationRef}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyToken": []
                    }
                ],
                "description": "Delete an organization in Papagaio and in Agola. Its possible to delete only in Papagaio using the parameter internalonly.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Delete Organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization Name",
                        "name": "organizationRef",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "?internalonly",
                        "name": "internalonly",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteOrganizationResponseDto"
                        }
                    },
                    "500": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/getexternaluser/{organizationRef}": {
            "get": {
                "security": [
                    {
                        "ApiKeyToken": []
                    }
                ],
                "description": "Return the organization e-mail list of External Users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Get a list of External Users e-mails",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization Name",
                        "name": "organizationRef",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request"
                    }
                }
            }
        },
        "/gettriggersconfig": {
            "get": {
                "security": [
                    {
                        "ApiKeyToken": []
                    }
                ],
                "description": "Get trigger timers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Triggers"
                ],
                "summary": "Return time triggers",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/dto.ConfigTriggersDto"
                        }
                    }
                }
            }
        },
        "/gitorganizations": {
            "get": {
                "security": [
                    {
                        "ApiKeyToken": []
                    }
                ],
                "description": "Return a list of all Organizations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GitSources"
                ],
                "summary": "List Git Organizations",
                "responses": {
                    "200": {
                        "description": "ok"
                    },
                    "404": {
                        "description": "not found"
                    }
                }
            }
        },
        "/gitsource": {
            "post": {
                "security": [
                    {
                        "ApiKeyToken": []
                    }
                ],
                "description": "Add a GitSource with the data provided in the body",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GitSources"
                ],
                "summary": "Add a GitSource",
                "parameters": [
                    {
                        "description": "Git Source information",
                        "name": "gitSource",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateGitSourceRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    },
                    "422": {
                        "description": "Already exists"
                    }
                }
            }
        },
        "/gitsource/{gitSourceName}": {
            "put": {
                "security": [
                    {
                        "ApiKeyToken": []
                    }
                ],
                "description": "Update GitSource information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GitSources"
                ],
                "summary": "Update a GitSource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Git Source Name",
                        "name": "gitSourceName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Git Source information",
                        "name": "gitSource",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateGitSourceRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    },
                    "404": {
                        "description": "not found"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyToken": []
                    }
                ],
                "description": "Remove a GitSource",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GitSources"
                ],
                "summary": "Remove a GitSource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Git Source Name",
                        "name": "gitSourceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    },
                    "422": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/gitsources": {
            "get": {
                "security": [
                    {
                        "ApiKeyToken": []
                    }
                ],
                "description": "Return a list of gitsources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GitSources"
                ],
                "summary": "Return a list of gitsources",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.GitSourcesDto"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request"
                    }
                }
            }
        },
        "/report": {
            "get": {
                "security": [
                    {
                        "ApiKeyToken": []
                    }
                ],
                "description": "Obtain a full report of all organizations. If the \"onlyowner\" query parameter is specified, only the organizations the user owns will be listed.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Get Report",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "?onlyowner",
                        "name": "onlyowner",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.OrganizationDto"
                            }
                        }
                    }
                }
            }
        },
        "/report/{organizationRef}": {
            "get": {
                "security": [
                    {
                        "ApiKeyToken": []
                    }
                ],
                "description": "Obtain a report of a specific organization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Get Report from a specific organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization Name",
                        "name": "organizationRef",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/dto.OrganizationDto"
                        }
                    },
                    "404": {
                        "description": "not found"
                    }
                }
            }
        },
        "/report/{organizationRef}/{projectName}": {
            "get": {
                "security": [
                    {
                        "ApiKeyToken": []
                    }
                ],
                "description": "Obtain a report of a specific organization/project",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Get Report from a specific organization/project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization Name",
                        "name": "organizationRef",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Project Name",
                        "name": "projectName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/dto.ProjectDto"
                        }
                    },
                    "404": {
                        "description": "not found"
                    }
                }
            }
        },
        "/restarttriggers": {
            "post": {
                "security": [
                    {
                        "ApiKeyToken": []
                    }
                ],
                "description": "Restart timers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Triggers"
                ],
                "summary": "restart triggers",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "?restartAll",
                        "name": "restartAll",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "?restartorganizationsynktrigger",
                        "name": "restartorganizationsynktrigger",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "?restartRunsFailedDiscoveryTrigger",
                        "name": "restartRunsFailedDiscoveryTrigger",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "?restartUsersSynkTrigger",
                        "name": "restartUsersSynkTrigger",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/savetriggersconfig": {
            "post": {
                "security": [
                    {
                        "ApiKeyToken": []
                    }
                ],
                "description": "Save trigger timers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Triggers"
                ],
                "summary": "Save time triggers",
                "parameters": [
                    {
                        "description": "Config triggers",
                        "name": "configTriggersDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ConfigTriggersDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        },
        "/triggersstatus": {
            "get": {
                "security": [
                    {
                        "ApiKeyToken": []
                    }
                ],
                "description": "Get triggers status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Triggers"
                ],
                "summary": "get triggers status",
                "responses": {
                    "200": {
                        "description": "ok"
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.BranchDto": {
            "type": "object",
            "properties": {
                "lastFailedRunDate": {
                    "type": "string"
                },
                "lastFailedRunURL": {
                    "type": "string"
                },
                "lastRunDuration": {
                    "type": "integer"
                },
                "lastSuccessRunDate": {
                    "type": "string"
                },
                "lastSuccessRunURL": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "report": {
                    "$ref": "#/definitions/dto.ReportDto"
                },
                "state": {
                    "description": "state of last run",
                    "type": "string"
                }
            }
        },
        "dto.ConfigTriggersDto": {
            "type": "object",
            "properties": {
                "organizationsTriggerTime": {
                    "type": "integer"
                },
                "runFailedTriggerTime": {
                    "type": "integer"
                },
                "usersTriggerTime": {
                    "type": "integer"
                }
            }
        },
        "dto.CreateGitSourceRequestDto": {
            "type": "object",
            "properties": {
                "agolaClientId": {
                    "type": "string"
                },
                "agolaClientSecret": {
                    "type": "string"
                },
                "agolaRemoteSourceName": {
                    "type": "string"
                },
                "gitApiUrl": {
                    "type": "string"
                },
                "gitClientId": {
                    "type": "string"
                },
                "gitClientSecret": {
                    "type": "string"
                },
                "gitType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.CreateOrganizationRequestDto": {
            "type": "object",
            "properties": {
                "agolaRef": {
                    "type": "string"
                },
                "behaviourExclude": {
                    "type": "string"
                },
                "behaviourInclude": {
                    "type": "string"
                },
                "behaviourType": {
                    "type": "string"
                },
                "gitPath": {
                    "type": "string"
                },
                "visibility": {
                    "type": "string"
                }
            }
        },
        "dto.CreateOrganizationResponseDto": {
            "type": "object",
            "properties": {
                "errorCode": {
                    "type": "string"
                },
                "organizationURL": {
                    "type": "string"
                }
            }
        },
        "dto.DeleteOrganizationResponseDto": {
            "type": "object",
            "properties": {
                "errorCode": {
                    "type": "string"
                }
            }
        },
        "dto.ExternalUserDto": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "dto.GitSourcesDto": {
            "type": "object",
            "properties": {
                "gitApiUrl": {
                    "type": "string"
                },
                "gitType": {
                    "type": "string"
                },
                "loginUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.OrganizationDto": {
            "type": "object",
            "properties": {
                "agolaRef": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastFailedRunDate": {
                    "type": "string"
                },
                "lastFailedRunURL": {
                    "type": "string"
                },
                "lastRunDuration": {
                    "type": "integer"
                },
                "lastSuccessRunDate": {
                    "type": "string"
                },
                "lastSuccessRunURL": {
                    "type": "string"
                },
                "organizationName": {
                    "type": "string"
                },
                "organizationURL": {
                    "type": "string"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ProjectDto"
                    }
                },
                "visibility": {
                    "type": "string"
                },
                "worstReport": {
                    "$ref": "#/definitions/dto.ReportDto"
                }
            }
        },
        "dto.ProjectDto": {
            "type": "object",
            "properties": {
                "branchs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.BranchDto"
                    }
                },
                "projectName": {
                    "type": "string"
                },
                "projectURL": {
                    "type": "string"
                },
                "worstReport": {
                    "$ref": "#/definitions/dto.ReportDto"
                }
            }
        },
        "dto.ReportDto": {
            "type": "object",
            "properties": {
                "branchName": {
                    "type": "string"
                },
                "failedRuns": {
                    "type": "integer"
                },
                "organizationName": {
                    "type": "string"
                },
                "projectName": {
                    "type": "string"
                },
                "successRunsPercentage": {
                    "type": "integer"
                },
                "totalRuns": {
                    "type": "integer"
                }
            }
        },
        "dto.UpdateGitSourceRequestDto": {
            "type": "object",
            "properties": {
                "agolaRemoteSource": {
                    "type": "string"
                },
                "gitApiUrl": {
                    "type": "string"
                },
                "gitClientId": {
                    "type": "string"
                },
                "gitClientSecret": {
                    "type": "string"
                },
                "gitType": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyToken": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.1.0",
	Host:        "",
	BasePath:    "/api",
	Schemes:     []string{},
	Title:       "papagaio-api",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
