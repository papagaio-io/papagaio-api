// Code generated by MockGen. DO NOT EDIT.
// Source: api/agola/agolaApi.go

// Package mock_agola is a generated GoMock package.
package mock_agola

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	agola "wecode.sorint.it/opensource/papagaio-api/api/agola"
	dto "wecode.sorint.it/opensource/papagaio-api/dto"
	model "wecode.sorint.it/opensource/papagaio-api/model"
)

// MockAgolaApiInterface is a mock of AgolaApiInterface interface
type MockAgolaApiInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAgolaApiInterfaceMockRecorder
}

// MockAgolaApiInterfaceMockRecorder is the mock recorder for MockAgolaApiInterface
type MockAgolaApiInterfaceMockRecorder struct {
	mock *MockAgolaApiInterface
}

// NewMockAgolaApiInterface creates a new mock instance
func NewMockAgolaApiInterface(ctrl *gomock.Controller) *MockAgolaApiInterface {
	mock := &MockAgolaApiInterface{ctrl: ctrl}
	mock.recorder = &MockAgolaApiInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAgolaApiInterface) EXPECT() *MockAgolaApiInterfaceMockRecorder {
	return m.recorder
}

// CheckOrganizationExists mocks base method
func (m *MockAgolaApiInterface) CheckOrganizationExists(agolaOrganizationRef string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrganizationExists", agolaOrganizationRef)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckOrganizationExists indicates an expected call of CheckOrganizationExists
func (mr *MockAgolaApiInterfaceMockRecorder) CheckOrganizationExists(agolaOrganizationRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrganizationExists", reflect.TypeOf((*MockAgolaApiInterface)(nil).CheckOrganizationExists), agolaOrganizationRef)
}

// CheckProjectExists mocks base method
func (m *MockAgolaApiInterface) CheckProjectExists(agolaOrganizationRef, projectName string) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProjectExists", agolaOrganizationRef, projectName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// CheckProjectExists indicates an expected call of CheckProjectExists
func (mr *MockAgolaApiInterfaceMockRecorder) CheckProjectExists(agolaOrganizationRef, projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProjectExists", reflect.TypeOf((*MockAgolaApiInterface)(nil).CheckProjectExists), agolaOrganizationRef, projectName)
}

// CreateOrganization mocks base method
func (m *MockAgolaApiInterface) CreateOrganization(name string, visibility dto.VisibilityType) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", name, visibility)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization
func (mr *MockAgolaApiInterfaceMockRecorder) CreateOrganization(name, visibility interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockAgolaApiInterface)(nil).CreateOrganization), name, visibility)
}

// DeleteOrganization mocks base method
func (m *MockAgolaApiInterface) DeleteOrganization(name, agolaUserToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", name, agolaUserToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganization indicates an expected call of DeleteOrganization
func (mr *MockAgolaApiInterfaceMockRecorder) DeleteOrganization(name, agolaUserToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockAgolaApiInterface)(nil).DeleteOrganization), name, agolaUserToken)
}

// CreateProject mocks base method
func (m *MockAgolaApiInterface) CreateProject(projectName string, organization *model.Organization, remoteSourceName, agolaUserToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", projectName, organization, remoteSourceName, agolaUserToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject
func (mr *MockAgolaApiInterfaceMockRecorder) CreateProject(projectName, organization, remoteSourceName, agolaUserToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockAgolaApiInterface)(nil).CreateProject), projectName, organization, remoteSourceName, agolaUserToken)
}

// DeleteProject mocks base method
func (m *MockAgolaApiInterface) DeleteProject(organizationName, projectname, agolaUserToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", organizationName, projectname, agolaUserToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject
func (mr *MockAgolaApiInterfaceMockRecorder) DeleteProject(organizationName, projectname, agolaUserToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockAgolaApiInterface)(nil).DeleteProject), organizationName, projectname, agolaUserToken)
}

// GetRemoteSources mocks base method
func (m *MockAgolaApiInterface) GetRemoteSources() (*[]agola.RemoteSourcesDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteSources")
	ret0, _ := ret[0].(*[]agola.RemoteSourcesDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteSources indicates an expected call of GetRemoteSources
func (mr *MockAgolaApiInterfaceMockRecorder) GetRemoteSources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteSources", reflect.TypeOf((*MockAgolaApiInterface)(nil).GetRemoteSources))
}

// AddOrUpdateOrganizationMember mocks base method
func (m *MockAgolaApiInterface) AddOrUpdateOrganizationMember(agolaOrganizationRef, agolaUserRef, role string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateOrganizationMember", agolaOrganizationRef, agolaUserRef, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrUpdateOrganizationMember indicates an expected call of AddOrUpdateOrganizationMember
func (mr *MockAgolaApiInterfaceMockRecorder) AddOrUpdateOrganizationMember(agolaOrganizationRef, agolaUserRef, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateOrganizationMember", reflect.TypeOf((*MockAgolaApiInterface)(nil).AddOrUpdateOrganizationMember), agolaOrganizationRef, agolaUserRef, role)
}

// RemoveOrganizationMember mocks base method
func (m *MockAgolaApiInterface) RemoveOrganizationMember(agolaOrganizationRef, agolaUserRef string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOrganizationMember", agolaOrganizationRef, agolaUserRef)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOrganizationMember indicates an expected call of RemoveOrganizationMember
func (mr *MockAgolaApiInterfaceMockRecorder) RemoveOrganizationMember(agolaOrganizationRef, agolaUserRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOrganizationMember", reflect.TypeOf((*MockAgolaApiInterface)(nil).RemoveOrganizationMember), agolaOrganizationRef, agolaUserRef)
}

// GetOrganizationMembers mocks base method
func (m *MockAgolaApiInterface) GetOrganizationMembers(agolaOrganizationRef string) (*agola.OrganizationMembersResponseDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationMembers", agolaOrganizationRef)
	ret0, _ := ret[0].(*agola.OrganizationMembersResponseDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationMembers indicates an expected call of GetOrganizationMembers
func (mr *MockAgolaApiInterfaceMockRecorder) GetOrganizationMembers(agolaOrganizationRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationMembers", reflect.TypeOf((*MockAgolaApiInterface)(nil).GetOrganizationMembers), agolaOrganizationRef)
}

// ArchiveProject mocks base method
func (m *MockAgolaApiInterface) ArchiveProject(agolaOrganizationRef, projectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveProject", agolaOrganizationRef, projectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveProject indicates an expected call of ArchiveProject
func (mr *MockAgolaApiInterfaceMockRecorder) ArchiveProject(agolaOrganizationRef, projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveProject", reflect.TypeOf((*MockAgolaApiInterface)(nil).ArchiveProject), agolaOrganizationRef, projectName)
}

// UnarchiveProject mocks base method
func (m *MockAgolaApiInterface) UnarchiveProject(agolaOrganizationRef, projectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnarchiveProject", agolaOrganizationRef, projectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnarchiveProject indicates an expected call of UnarchiveProject
func (mr *MockAgolaApiInterfaceMockRecorder) UnarchiveProject(agolaOrganizationRef, projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnarchiveProject", reflect.TypeOf((*MockAgolaApiInterface)(nil).UnarchiveProject), agolaOrganizationRef, projectName)
}

// GetRuns mocks base method
func (m *MockAgolaApiInterface) GetRuns(projectRef string, lastRun bool, phase string, startRunID *string, limit uint, asc bool) (*[]agola.RunDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuns", projectRef, lastRun, phase, startRunID, limit, asc)
	ret0, _ := ret[0].(*[]agola.RunDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuns indicates an expected call of GetRuns
func (mr *MockAgolaApiInterfaceMockRecorder) GetRuns(projectRef, lastRun, phase, startRunID, limit, asc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuns", reflect.TypeOf((*MockAgolaApiInterface)(nil).GetRuns), projectRef, lastRun, phase, startRunID, limit, asc)
}

// GetRun mocks base method
func (m *MockAgolaApiInterface) GetRun(runID string) (*agola.RunDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRun", runID)
	ret0, _ := ret[0].(*agola.RunDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRun indicates an expected call of GetRun
func (mr *MockAgolaApiInterfaceMockRecorder) GetRun(runID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRun", reflect.TypeOf((*MockAgolaApiInterface)(nil).GetRun), runID)
}

// GetTask mocks base method
func (m *MockAgolaApiInterface) GetTask(runID, taskID string) (*agola.TaskDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", runID, taskID)
	ret0, _ := ret[0].(*agola.TaskDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask
func (mr *MockAgolaApiInterfaceMockRecorder) GetTask(runID, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockAgolaApiInterface)(nil).GetTask), runID, taskID)
}

// GetLogs mocks base method
func (m *MockAgolaApiInterface) GetLogs(runID, taskID string, step int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", runID, taskID, step)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs
func (mr *MockAgolaApiInterfaceMockRecorder) GetLogs(runID, taskID, step interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockAgolaApiInterface)(nil).GetLogs), runID, taskID, step)
}
