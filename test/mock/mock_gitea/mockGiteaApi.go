// Code generated by MockGen. DO NOT EDIT.
// Source: api/git/gitea/giteaApi.go

// Package mock_gitea is a generated GoMock package.
package mock_gitea

import (
	gomock "github.com/golang/mock/gomock"
	oauth2 "golang.org/x/oauth2"
	reflect "reflect"
	dto "wecode.sorint.it/opensource/papagaio-api/api/git/dto"
	model "wecode.sorint.it/opensource/papagaio-api/model"
)

// MockGiteaInterface is a mock of GiteaInterface interface
type MockGiteaInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGiteaInterfaceMockRecorder
}

// MockGiteaInterfaceMockRecorder is the mock recorder for MockGiteaInterface
type MockGiteaInterfaceMockRecorder struct {
	mock *MockGiteaInterface
}

// NewMockGiteaInterface creates a new mock instance
func NewMockGiteaInterface(ctrl *gomock.Controller) *MockGiteaInterface {
	mock := &MockGiteaInterface{ctrl: ctrl}
	mock.recorder = &MockGiteaInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGiteaInterface) EXPECT() *MockGiteaInterfaceMockRecorder {
	return m.recorder
}

// CreateWebHook mocks base method
func (m *MockGiteaInterface) CreateWebHook(gitSource *model.GitSource, user *model.User, gitOrgRef, organizationRef string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebHook", gitSource, user, gitOrgRef, organizationRef)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebHook indicates an expected call of CreateWebHook
func (mr *MockGiteaInterfaceMockRecorder) CreateWebHook(gitSource, user, gitOrgRef, organizationRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebHook", reflect.TypeOf((*MockGiteaInterface)(nil).CreateWebHook), gitSource, user, gitOrgRef, organizationRef)
}

// DeleteWebHook mocks base method
func (m *MockGiteaInterface) DeleteWebHook(gitSource *model.GitSource, user *model.User, gitOrgRef string, webHookID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebHook", gitSource, user, gitOrgRef, webHookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWebHook indicates an expected call of DeleteWebHook
func (mr *MockGiteaInterfaceMockRecorder) DeleteWebHook(gitSource, user, gitOrgRef, webHookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebHook", reflect.TypeOf((*MockGiteaInterface)(nil).DeleteWebHook), gitSource, user, gitOrgRef, webHookID)
}

// GetRepositories mocks base method
func (m *MockGiteaInterface) GetRepositories(gitSource *model.GitSource, user *model.User, gitOrgRef string) (*[]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositories", gitSource, user, gitOrgRef)
	ret0, _ := ret[0].(*[]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositories indicates an expected call of GetRepositories
func (mr *MockGiteaInterfaceMockRecorder) GetRepositories(gitSource, user, gitOrgRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositories", reflect.TypeOf((*MockGiteaInterface)(nil).GetRepositories), gitSource, user, gitOrgRef)
}

// GetOrganization mocks base method
func (m *MockGiteaInterface) GetOrganization(gitSource *model.GitSource, user *model.User, gitOrgRef string) *dto.OrganizationDto {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", gitSource, user, gitOrgRef)
	ret0, _ := ret[0].(*dto.OrganizationDto)
	return ret0
}

// GetOrganization indicates an expected call of GetOrganization
func (mr *MockGiteaInterfaceMockRecorder) GetOrganization(gitSource, user, gitOrgRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockGiteaInterface)(nil).GetOrganization), gitSource, user, gitOrgRef)
}

// CheckOrganizationExists mocks base method
func (m *MockGiteaInterface) CheckOrganizationExists(gitSource *model.GitSource, user *model.User, gitOrgRef string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrganizationExists", gitSource, user, gitOrgRef)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckOrganizationExists indicates an expected call of CheckOrganizationExists
func (mr *MockGiteaInterfaceMockRecorder) CheckOrganizationExists(gitSource, user, gitOrgRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrganizationExists", reflect.TypeOf((*MockGiteaInterface)(nil).CheckOrganizationExists), gitSource, user, gitOrgRef)
}

// GetRepositoryTeams mocks base method
func (m *MockGiteaInterface) GetRepositoryTeams(gitSource *model.GitSource, user *model.User, gitOrgRef, repositoryRef string) (*[]dto.TeamResponseDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryTeams", gitSource, user, gitOrgRef, repositoryRef)
	ret0, _ := ret[0].(*[]dto.TeamResponseDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryTeams indicates an expected call of GetRepositoryTeams
func (mr *MockGiteaInterfaceMockRecorder) GetRepositoryTeams(gitSource, user, gitOrgRef, repositoryRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryTeams", reflect.TypeOf((*MockGiteaInterface)(nil).GetRepositoryTeams), gitSource, user, gitOrgRef, repositoryRef)
}

// GetOrganizationTeams mocks base method
func (m *MockGiteaInterface) GetOrganizationTeams(gitSource *model.GitSource, user *model.User, gitOrgRef string) (*[]dto.TeamResponseDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationTeams", gitSource, user, gitOrgRef)
	ret0, _ := ret[0].(*[]dto.TeamResponseDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationTeams indicates an expected call of GetOrganizationTeams
func (mr *MockGiteaInterfaceMockRecorder) GetOrganizationTeams(gitSource, user, gitOrgRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationTeams", reflect.TypeOf((*MockGiteaInterface)(nil).GetOrganizationTeams), gitSource, user, gitOrgRef)
}

// GetTeamMembers mocks base method
func (m *MockGiteaInterface) GetTeamMembers(gitSource *model.GitSource, user *model.User, teamId int) (*[]dto.UserTeamResponseDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamMembers", gitSource, user, teamId)
	ret0, _ := ret[0].(*[]dto.UserTeamResponseDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamMembers indicates an expected call of GetTeamMembers
func (mr *MockGiteaInterfaceMockRecorder) GetTeamMembers(gitSource, user, teamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamMembers", reflect.TypeOf((*MockGiteaInterface)(nil).GetTeamMembers), gitSource, user, teamId)
}

// GetBranches mocks base method
func (m *MockGiteaInterface) GetBranches(gitSource *model.GitSource, user *model.User, gitOrgRef, repositoryRef string) map[string]bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranches", gitSource, user, gitOrgRef, repositoryRef)
	ret0, _ := ret[0].(map[string]bool)
	return ret0
}

// GetBranches indicates an expected call of GetBranches
func (mr *MockGiteaInterfaceMockRecorder) GetBranches(gitSource, user, gitOrgRef, repositoryRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranches", reflect.TypeOf((*MockGiteaInterface)(nil).GetBranches), gitSource, user, gitOrgRef, repositoryRef)
}

// CheckRepositoryAgolaConfExists mocks base method
func (m *MockGiteaInterface) CheckRepositoryAgolaConfExists(gitSource *model.GitSource, user *model.User, gitOrgRef, repositoryRef string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRepositoryAgolaConfExists", gitSource, user, gitOrgRef, repositoryRef)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRepositoryAgolaConfExists indicates an expected call of CheckRepositoryAgolaConfExists
func (mr *MockGiteaInterfaceMockRecorder) CheckRepositoryAgolaConfExists(gitSource, user, gitOrgRef, repositoryRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRepositoryAgolaConfExists", reflect.TypeOf((*MockGiteaInterface)(nil).CheckRepositoryAgolaConfExists), gitSource, user, gitOrgRef, repositoryRef)
}

// GetCommitMetadata mocks base method
func (m *MockGiteaInterface) GetCommitMetadata(gitSource *model.GitSource, user *model.User, gitOrgRef, repositoryRef, commitSha string) (*dto.CommitMetadataDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitMetadata", gitSource, user, gitOrgRef, repositoryRef, commitSha)
	ret0, _ := ret[0].(*dto.CommitMetadataDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitMetadata indicates an expected call of GetCommitMetadata
func (mr *MockGiteaInterfaceMockRecorder) GetCommitMetadata(gitSource, user, gitOrgRef, repositoryRef, commitSha interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitMetadata", reflect.TypeOf((*MockGiteaInterface)(nil).GetCommitMetadata), gitSource, user, gitOrgRef, repositoryRef, commitSha)
}

// GetOrganizations mocks base method
func (m *MockGiteaInterface) GetOrganizations(gitSource *model.GitSource, user *model.User) (*[]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizations", gitSource, user)
	ret0, _ := ret[0].(*[]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizations indicates an expected call of GetOrganizations
func (mr *MockGiteaInterfaceMockRecorder) GetOrganizations(gitSource, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizations", reflect.TypeOf((*MockGiteaInterface)(nil).GetOrganizations), gitSource, user)
}

// GetUserInfo mocks base method
func (m *MockGiteaInterface) GetUserInfo(gitSource *model.GitSource, user *model.User) (*dto.UserInfoDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", gitSource, user)
	ret0, _ := ret[0].(*dto.UserInfoDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo
func (mr *MockGiteaInterfaceMockRecorder) GetUserInfo(gitSource, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockGiteaInterface)(nil).GetUserInfo), gitSource, user)
}

// GetOauth2AccessToken mocks base method
func (m *MockGiteaInterface) GetOauth2AccessToken(gitSource *model.GitSource, code string) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOauth2AccessToken", gitSource, code)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOauth2AccessToken indicates an expected call of GetOauth2AccessToken
func (mr *MockGiteaInterfaceMockRecorder) GetOauth2AccessToken(gitSource, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOauth2AccessToken", reflect.TypeOf((*MockGiteaInterface)(nil).GetOauth2AccessToken), gitSource, code)
}

// RefreshToken mocks base method
func (m *MockGiteaInterface) RefreshToken(gitSource *model.GitSource, refreshToken string) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", gitSource, refreshToken)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken
func (mr *MockGiteaInterfaceMockRecorder) RefreshToken(gitSource, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockGiteaInterface)(nil).RefreshToken), gitSource, refreshToken)
}
